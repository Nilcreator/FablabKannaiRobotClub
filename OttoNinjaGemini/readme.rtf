{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid303\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\paperw11900\paperh16840\margl1440\margr1440\vieww25060\viewh14480\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Okay, here is an explanation document for the Ninja_Gemini_Movement_Optimized.py code. This document aims to help users understand what the code does, how it works, and how to interact with it.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 \strokec2 Ninja Gemini Robot Control System - Explanation
\f0\b0 \

\f1\b 1. Overview
\f0\b0 \
This Python script (Ninja_Gemini_Movement_Optimized.py) controls a four-servo robot built using a Raspberry Pi Zero, a DFRobot IO Expansion HAT, an ultrasonic distance sensor, and a buzzer.\
The robot can perform various predefined movements (like walking, running, turning, waving hello) and can also move its servos to specific angles based on natural language text commands entered by the user. The Google Gemini Pro AI model is used to interpret these text commands.\
Additionally, the robot uses the ultrasonic sensor to detect nearby obstacles and automatically stops certain movements (like walking or running) if an object gets too close. Sound feedback is provided using the buzzer for various actions and events.\

\f1\b 2. Key Features
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Text-Based Control:
\f0\b0  Accepts plain English commands to control the robot.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Gemini AI Integration:
\f0\b0  Uses Google's Gemini Pro model to understand user commands and extract desired servo angles and movement modifiers (like speed).\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Predefined Movements:
\f0\b0  Includes functions for specific actions like walk, run, turn left, turn right, rotate left, rotate right, step back, run back, hello, rest, and stop.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Speed Modification:
\f0\b0  Allows specifying "fast" or "slow" for continuous movements like walk and run.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ultrasonic Distance Sensing:
\f0\b0  Uses an HC-SR04 sensor to measure distances.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Obstacle Avoidance:
\f0\b0  Automatically stops forward continuous movements (walk, run, etc.) if an object is detected within a predefined threshold (5 cm).\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sound Feedback:
\f0\b0  Uses a buzzer (controlled by Ninja_Buzzer.py) to provide audible cues for startup, shutdown, specific movements (hello, turns), obstacle detection (danger), and other events (exciting run, scared step back).\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Servo Control:
\f0\b0  Manages four servos connected to the DFRobot HAT's PWM outputs. Includes functions to reset servos to a default position.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Threading for Continuous Movements:
\f0\b0  Runs continuous actions like walk and run in separate threads so the main program can still accept commands like "stop".\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Robust Cleanup:
\f0\b0  Ensures GPIO resources are properly released when the program stops, even if an error occurs.\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 3. Hardware Requirements
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Raspberry Pi Zero (or Zero W)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DFRobot IO Expansion HAT for Raspberry Pi Zero\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 4 x Servos (Mix of 180-degree and 360-degree as specified in the code's movement logic)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 HC-SR04 Ultrasonic Distance Sensor\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Active Buzzer\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 External 5V Power Supply (Separate for servos is highly recommended)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Jumper Wires\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 MicroSD Card with Raspberry Pi OS\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 4. Software Setup
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Python 3:
\f0\b0  The script is written for Python 3.\
\ls3\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Required Libraries:
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 google-generativeai: For interacting with the Gemini API.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 RPi.GPIO: For controlling the ultrasonic sensor and potentially the buzzer.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DFRobot_RaspberryPi_Expansion_Board: The specific library for the DFRobot HAT (must be installed correctly and accessible).\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ninja_Buzzer.py: The separate file containing the buzzer sound definitions and control functions (must be in the same directory or accessible via Python's path).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Google Cloud Setup:
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A Google Cloud project with the Vertex AI API enabled.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Authentication configured: Either via an API Key set in the script OR using Application Default Credentials (ADC) by running gcloud auth application-default login on the Pi Zero.\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 5. How it Works (Core Logic)
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Initialization (if __name__ == "__main__":)
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sets up GPIO mode.\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Calls initialize_hardware(): Sets up GPIO pins for the sensor, initializes the buzzer PWM, connects to the DFRobot HAT, initializes the servo controller, and resets servos to their starting positions. Plays a "happy" startup sound.\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Calls initialize_gemini(): Configures the connection to the Google Gemini API using your credentials and loads the specified AI model.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Main Loop (while True:)
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Obstacle Check:
\f0\b0  
\f2\i Before
\f0\i0  asking for input, if a continuous movement might be running (not stop_movement), it checks the distance using measure_distance(). If an obstacle is too close (< 5 cm), it plays the "danger" sound, calls stop() to halt movement and reset servos, and skips to the next loop iteration.\
\ls4\ilvl1
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Get User Input:
\f0\b0  Prompts the user to enter a text command.\
\ls4\ilvl1
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Stop Previous Movement:
\f0\b0  Calls stop() to ensure any ongoing continuous movement (from a previous command) is halted and servos are reset before processing the new command.\
\ls4\ilvl1
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Command Processing:
\f0\b0 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sa240\partightenfactor0
\ls4\ilvl2
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Keyword Matching:
\f0\b0  It first checks if the user's input contains keywords corresponding to predefined movements (like "walk", "run", "hello", "stop", etc.) defined in the COMMAND_MAP. It also looks for simple speed modifiers ("fast", "slow") if present with these keywords.\
\ls4\ilvl2
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Execute Mapped Command:
\f0\b0  If a keyword is found, it executes the corresponding function from the COMMAND_MAP. For continuous movements, it passes the extracted speed modifier.\
\ls4\ilvl2
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Gemini Interpretation:
\f0\b0  If no predefined command keyword is matched, the script assumes the user wants to set specific servo angles. It sends the user's raw command to Gemini via get_gemini_command_details().\
\ls4\ilvl2
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Parse Gemini Response:
\f0\b0  It attempts to parse the JSON-like response from Gemini using extract_command_details_from_json() to get individual servo angles (and potentially speed/style modifiers, although direct angle setting doesn't use speed/style in this version).\
\ls4\ilvl2
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Execute Direct Angle Command:
\f0\b0  If valid angles are extracted, it moves each servo to the specified position using servo_controller.move().\
\ls4\ilvl2
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Invalid Command:
\f0\b0  If no keyword is matched and Gemini parsing fails, it prints "Invalid command".\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Loop:
\f0\b0  The process repeats, waiting for the next user command.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Cleanup (finally: block)
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This block 
\f2\i always
\f0\i0  runs when the program exits (normally, via Ctrl+C, or due to an error).\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It ensures ongoing movements are stopped (stop()).\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It stops the buzzer PWM.\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It calls the cleanup functions for the buzzer module and RPi.GPIO to release all hardware resources properly.\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 6. Detailed Function Explanations
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 initialize_hardware() / initialize_gemini():
\f0\b0  Set up the necessary connections and objects for hardware and the AI model. Crucial for the script to function.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 print_board_status():
\f0\b0  Provides feedback on the DFRobot HAT's status after operations.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 get_sleep_time(speed):
\f0\b0  Calculates the delay used in loops based on the desired speed ("fast", "slow", "normal").\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 measure_distance():
\f0\b0  Sends an ultrasonic pulse, listens for the echo, calculates the time difference, and converts it to distance in centimeters. Returns -1 if no echo is detected within the timeout.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 get_gemini_command_details(text_command):
\f0\b0  Formats a detailed prompt for Gemini, sends the user's command, and returns Gemini's text response.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 extract_command_details_from_json(json_string):
\f0\b0  Parses the JSON-like string from Gemini using regular expressions to reliably extract servo angles and speed/style modifiers, handling potential formatting issues and missing values.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 reset_servos():
\f0\b0  Moves all servos to their predefined starting angles (defined in SERVO_RESET_ANGLES).\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Movement Functions (hello, walk, run, turnleft, turnright, rotateleft, rotateright, stepback, runback, rest):
\f0\b0  Each of these functions executes a specific sequence of servo_controller.move() commands and time.sleep() delays to create the desired robot action. Continuous movements (walk, run, etc.) run in loops that check the stop_movement flag and perform obstacle checks. They also incorporate sound effects.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 stop():
\f0\b0  Sets the stop_movement flag to True (signaling threads to exit their loops) and calls reset_servos().\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 continuous_movement(movement_func, speed, style):
\f0\b0  Starts a given movement function (like walk or run) in a background thread. This prevents the main program from freezing while the robot is moving continuously. It also stops any previously running continuous movement.\
\ls5\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 cleanup():
\f0\b0  Releases GPIO resources to prevent conflicts or issues when the script finishes or if it crashes.\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 7. Command Examples
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls6\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 hello - Robot performs the wave/hello sequence.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 walk - Robot starts walking forward at normal speed.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 walk fast - Robot starts walking forward at a faster speed.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 run slow - Robot starts running forward at a slower speed.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 turn left - Robot performs a single turn to the left.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 rotate right fast - Robot starts rotating clockwise quickly.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 step back - Robot performs a single step backward sequence and plays the "scared" sound.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 move servo 1 to 120 - Moves servo 1 (PWM1) to 120 degrees.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 set servo 0 to 30 degrees and servo 3 to 150 degrees - Moves servo 0 to 30 and servo 3 to 150, others default to 90.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 stop - Halts any ongoing continuous movement and resets servos.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 rest - Moves servos to the predefined rest positions.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 quit or exit - Stops the program.\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 8. Important Notes & Configuration
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 API Key:
\f0\b0  Ensure your GOOGLE_API_KEY is correctly set in the script, OR that you have properly configured Application Default Credentials (ADC). Keep your API key secure.\
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Pin Numbers:
\f0\b0  
\f1\b CRITICAL:
\f0\b0  Double-check and modify the TRIG_PIN, ECHO_PIN, and BUZZER_PIN constants at the top of the script to match exactly where you have connected these components to your DFRobot HAT's GPIO pins. Incorrect pin numbers will cause parts of the script to fail.\
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Servo PWM Pins:
\f0\b0  The code assumes servos 0, 1, 2, and 3 are connected to the HAT's PWM outputs PWM0, PWM1, PWM2, and PWM3 respectively. The DFRobot library handles the mapping from these indices (0-3) to the actual GPIO pins used by the HAT for hardware PWM.\
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 External Power:
\f0\b0  
\f1\b ESSENTIAL:
\f0\b0  Servos draw significant current. You 
\f2\i must
\f0\i0  power the servos from a suitable external 5V power supply. Do NOT attempt to power them directly from the Raspberry Pi Zero's 5V pin, as this can damage the Pi. Ensure the ground of the external supply is connected to the Pi Zero's ground.\
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Library Paths:
\f0\b0  The sys.path.append(...) line assumes the DFRobot library directory is one level 
\f2\i above
\f0\i0  the directory where you save this script. Adjust this path if your project structure is different. The Ninja_Buzzer.py file must be in the same directory as this script or in a location included in Python's search path.\
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Servo Calibration:
\f0\b0  The angle ranges and reset/rest positions might need fine-tuning depending on your specific servos and how they are mounted. Pay special attention to the 360-degree servos used in run, rotateleft, rotateright, and runback \'96 the servo.move() values for these likely control speed/direction rather than a specific angle (90 is usually stop, values further from 90 are faster). You may need to experiment to find the best values for clockwise/counter-clockwise rotation at different speeds.\
\ls7\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Resource Limits:
\f0\b0  Be mindful that the Raspberry Pi Zero has limited processing power and RAM. Complex movements or very fast loops might strain the system.\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 9. Basic Troubleshooting
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls8\ilvl0
\f1\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 No Movement:
\f0\b0  Check wiring (power, ground, signal), pin numbers in the code, external power supply for servos. Check DFRobot board status messages. Run sudo i2cdetect -y 1 to see if the HAT is detected at address 0x10.\
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Buzzer Not Working:
\f0\b0  Check wiring, BUZZER_PIN constant, ensure Ninja_Buzzer.py is present and working independently. Check GPIO permissions.\
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ultrasonic Sensor Issues:
\f0\b0  Check wiring, TRIG_PIN/ECHO_PIN constants. Make sure the sensor has a clear line of sight. Test in a simple, separate script first.\
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Gemini Errors:
\f0\b0  Check API key/ADC setup, internet connection, ensure Vertex AI API is enabled. Look at the specific error message from the Gemini API call.\
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ImportError:
\f0\b0  Make sure the DFRobot library is installed correctly and the sys.path.append line points to the right location. Ensure Ninja_Buzzer.py is present.\
\ls8\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 General Errors:
\f0\b0  Read the error messages carefully. Add print() statements at various points in the code to track the program flow and variable values.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 This explanation should provide a good understanding of the Ninja_Gemini_Movement_Optimized.py script and how to use it. Remember to configure the constants correctly for your specific hardware setup!\
}